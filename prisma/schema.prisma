generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AIAgent {
  id           Int            @id @default(autoincrement())
  name         String
  type         AIAgentType
  config       Json
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  AILog        AILog[]
  Conversation Conversation[]
}

model AILog {
  id        Int      @id @default(autoincrement())
  agentId   Int
  action    String
  input     Json
  output    Json
  timestamp DateTime @default(now())
  AIAgent   AIAgent  @relation(fields: [agentId], references: [id])
}

model Attendance {
  id          Int       @id @default(autoincrement())
  date        DateTime
  checkIn     DateTime
  checkOut    DateTime?
  hoursWorked Float?
  employeeId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Company {
  id             Int        @id @default(autoincrement())
  name           String
  registrationNo String     @unique
  address        String
  contactNo      String
  email          String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Employee       Employee[]
  Job            Job[]
}

model Conversation {
  id        Int      @id @default(autoincrement())
  userId    Int
  agentId   Int
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime
  AIAgent   AIAgent  @relation(fields: [agentId], references: [id])
  Employee  Employee @relation(fields: [userId], references: [id])
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  key        String   @unique
  url        String
  employeeId Int
  uploadedAt DateTime @default(now())
  Employee   Employee @relation(fields: [employeeId], references: [id])
}

model Employee {
  id                  Int              @id @default(autoincrement())
  employeeId          String           @unique
  firstName           String
  lastName            String
  nric                String           @unique
  passportNo          String?
  email               String           @unique
  phone               String
  address             String
  dateOfBirth         DateTime
  dateJoined          DateTime
  department          String
  position            String
  salary              Float
  epfNo               String?
  socsoNo             String?
  taxNo               String?
  bankAccount         String?
  status              EmployeeStatus   @default(ACTIVE)
  leaveBalance        Int              @default(21)
  password            String
  role                UserRole         @default(EMPLOYEE)
  employerCompanyName String?
  employerDescription String?
  employerWebsite     String?
  skills              String?
  experienceYears     Int?
  companyId           Int
  createdAt           DateTime         @default(now())
  updatedAt           DateTime
  Attendance          Attendance[]
  Conversation        Conversation[]
  Document            Document[]
  Company             Company          @relation(fields: [companyId], references: [id])
  IRCase              IRCase[]
  IRCaseAction        IRCaseAction[]
  IRCaseDocument      IRCaseDocument[]
  Job                 Job[]
  JobApplication      JobApplication[]
  Leave               Leave[]
  Payroll             Payroll[]
  Recommendation      Recommendation[]
  Resume              Resume[]
}

model IRCase {
  id             Int              @id @default(autoincrement())
  caseNumber     String           @unique
  employeeId     Int
  type           IRCaseType
  status         IRCaseStatus     @default(OPEN)
  description    String
  allegations    Json
  riskLevel      RiskLevel        @default(LOW)
  assignedTo     Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Employee       Employee         @relation(fields: [employeeId], references: [id])
  IRCaseAction   IRCaseAction[]
  IRCaseDocument IRCaseDocument[]
}

model IRCaseAction {
  id          Int      @id @default(autoincrement())
  caseId      Int
  action      String
  performedBy Int
  notes       String?
  timestamp   DateTime @default(now())
  IRCase      IRCase   @relation(fields: [caseId], references: [id])
  Employee    Employee @relation(fields: [performedBy], references: [id])
}

model IRCaseDocument {
  id         Int      @id @default(autoincrement())
  caseId     Int
  name       String
  type       String
  url        String
  uploadedBy Int
  uploadedAt DateTime @default(now())
  IRCase     IRCase   @relation(fields: [caseId], references: [id])
  Employee   Employee @relation(fields: [uploadedBy], references: [id])
}

model Job {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  requirements   String
  location       String
  department     String?
  salaryMin      Float?
  salaryMax      Float?
  type           JobType
  status         JobStatus        @default(OPEN)
  employerId     Int
  companyId      Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Company        Company?         @relation(fields: [companyId], references: [id])
  Employee       Employee         @relation(fields: [employerId], references: [id])
  JobApplication JobApplication[]
  Recommendation Recommendation[]
}

model JobApplication {
  id          Int               @id @default(autoincrement())
  jobId       Int
  applicantId Int
  resumeId    Int
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime
  Employee    Employee          @relation(fields: [applicantId], references: [id])
  Job         Job               @relation(fields: [jobId], references: [id])
  Resume      Resume            @relation(fields: [resumeId], references: [id])
}

model Leave {
  id         Int         @id @default(autoincrement())
  type       LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  employeeId Int
  appliedAt  DateTime    @default(now())
  approvedAt DateTime?
  approvedBy Int?
  Employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Payroll {
  id               Int       @id @default(autoincrement())
  month            Int
  year             Int
  basicSalary      Float
  allowances       Float     @default(0)
  deductions       Float     @default(0)
  epfAmount        Float
  socsoAmount      Float
  eisAmount        Float     @default(0)
  tabungHajiAmount Float     @default(0)
  taxAmount        Float
  zakatAmount      Float     @default(0)
  netSalary        Float
  employeeId       Int
  paidAt           DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  Employee         Employee  @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, month, year])
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  score     Float
  reasons   Json
  createdAt DateTime @default(now())
  Job       Job      @relation(fields: [jobId], references: [id])
  Employee  Employee @relation(fields: [userId], references: [id])
}

model Resume {
  id             Int              @id @default(autoincrement())
  employeeId     Int
  fileUrl        String
  fileName       String
  parsedData     Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  JobApplication JobApplication[]
  Employee       Employee         @relation(fields: [employeeId], references: [id])
}

enum AIAgentType {
  COORDINATOR
  COMPLIANCE
  IR
  ER
  CB
  TA
  LD
  PERFORMANCE
  RESUME_PARSER
  CANDIDATE_MATCHER
  CHATBOT
  RECOMMENDER
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  PROBATION
  RESIGNED
  TERMINATED
}

enum IRCaseStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
  ESCALATED
}

enum IRCaseType {
  DISPUTE
  TERMINATION
  HARASSMENT
  UNFAIR_DISMISSAL
  UNION_MATTERS
  COMPLIANCE_VIOLATION
}

enum JobStatus {
  OPEN
  CLOSED
  FILLED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  EMERGENCY
  COMPASSIONATE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  ADMIN
  HR
  MANAGER
  EMPLOYEE
  EMPLOYER
  JOB_SEEKER
}
